/** –†–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
 *
 * 1) –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
 * 2) –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É –∫–æ—Ç–æ—Ä—ã—Ö —É–∫–∞–∑–∞–Ω –ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç –∏ –≤–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * 3) –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
 * 4) –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∏ –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
 * 5) –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
 * 6) –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */

const { getAllUsers, saveUser } = require('../../database/usersCollection');
const { getUserBalance } = require('../../balance/balance');
const sleep = require('../../components/sleep');
const sendBulkMessage = require('../../components/sendBulkMessage');

module.exports = async (bot) => {
	/** 1 */
	let users = await getAllUsers();

	/** 2 */
	users = users.filter(user => {
		if (user.balance && user.balance.number)
			if (user.notifications && user.notifications.balanceChange)
				return true;
		return false;
	});

	/** 3 */
	let promiseArray = [];
	for (let i = 0; i < users.length; i++) {
		if (i !== 0 && i % 50 === 0) await sleep(25000);
		promiseArray.push( getUserBalance(users[i].balance.number) );
	}
	let allBalance;
	await Promise.all(promiseArray).then(result => {
		allBalance = result;
	});

	/** 4 */
	let changedBalance = [];
	for (let balance of allBalance) {
		if (balance.error) {
			console.error('Error getting balance!', balance.text);
			continue;
		}
		for (let user of users) {
			if (user.balance.number === balance.data.number) {
				// –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∏ –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
				let flag = false;
				if (user.balance.balance !== balance.data.balance) flag = true;
				else if (user.balance.dolg !== balance.data.dolg) flag = true;
				else if (user.balance.penia !== balance.data.penia) flag = true;

				// –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ—Å—Ç—å
				if (flag) {
					// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–æ—Ç—Ä–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–∞–ª–∞–Ω—Å –¥–æ —ç—Ç–æ–≥–æ
					if (user.balance.balance != null) {
						changedBalance.push({
							id: user.id,
							oldBalance: user.balance,
							newBalance: balance.data
						});
					}
					// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –≤ –ë–î
					user.balance = balance.data;
					saveUser(user);
				}
			}
		}
	}

	/** 5 */
	let sendArray = [];
	for (let user of changedBalance) {
		let {oldBalance, newBalance} = user;
		let msg = `üí≥ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å!\n\n`;
		msg += countChanges('–ë–∞–ª–∞–Ω—Å', oldBalance.balance, newBalance.balance);
		msg += countChanges('–î–æ–ª–≥', oldBalance.dolg, newBalance.dolg);
		msg += countChanges('–ü–µ–Ω—è', oldBalance.penia, newBalance.penia, true);
		msg += `\nüí∞ –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:\n`
			+ `–ë–∞–ª–∞–Ω—Å: ${newBalance.balance.toFixed(2)}—Ä\n`
			+ `–û—Å–Ω–æ–≤–Ω–æ–π –¥–æ–ª–≥: ${newBalance.dolg.toFixed(2)}—Ä\n`
			+ `–ü–µ–Ω—è: ${newBalance.penia.toFixed(2)}—Ä`;

		sendArray.push({
			userId: user.id,
			msg: msg
		});
	}
	function countChanges(word, oldValue, newValue, isPenia = false) {
		let msg = '';
		if (oldValue - newValue > 0)
			msg = `‚Üò ${word} ${isPenia ? '—É–º–µ–Ω—å—à–∏–ª–∞—Å—å':'—É–º–µ–Ω—å—à–∏–ª—Å—è'} –Ω–∞ ${(oldValue - newValue).toFixed(2)}—Ä\n`;
		else if (oldValue - newValue < 0)
			msg = `‚Üó ${word} ${isPenia ? '—É–≤–µ–ª–∏—á–∏–ª–∞—Å—å':'—É–≤–µ–ª–∏—á–∏–ª—Å—è'} –Ω–∞ ${(newValue - oldValue).toFixed(2)}—Ä\n`;
		return msg;
	}

	/** 6 */
	sendBulkMessage(bot, sendArray);
	console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', sendArray);
};